{
  "blogs": [
    {
      "id": "1",
      "title": "Building Immersive 3D Web Experiences with Three.js and React",
      "slug": "building-immersive-3d-web-experiences-threejs-react",
      "excerpt": "Learn how to create stunning 3D web applications using Three.js and React Three Fiber. This comprehensive guide covers everything from basic setup to advanced techniques.",
      "content": "Creating immersive 3D web experiences has become increasingly popular in modern web development. With the power of Three.js and React Three Fiber, developers can build interactive 3D applications that run directly in the browser.\n\n## Getting Started with Three.js\n\nThree.js is a powerful JavaScript library that makes WebGL accessible to developers. It provides a high-level API for creating 3D graphics without needing to write complex WebGL code.\n\n### Key Concepts\n\n- **Scenes**: The 3D world where objects are placed\n- **Cameras**: Define the viewpoint of the scene\n- **Renderers**: Draw the scene to the screen\n- **Meshes**: 3D objects with geometry and materials\n- **Lights**: Illuminate the scene\n\n## React Three Fiber Integration\n\nReact Three Fiber brings the declarative nature of React to Three.js, making it easier to manage 3D scenes with component-based architecture.\n\n### Benefits\n\n- Component-based 3D scene management\n- Automatic cleanup and memory management\n- Integration with React's state management\n- TypeScript support out of the box\n\n## Best Practices\n\n1. **Performance Optimization**: Use instanced rendering for repeated objects\n2. **Memory Management**: Properly dispose of geometries and materials\n3. **Responsive Design**: Adapt 3D scenes to different screen sizes\n4. **Loading States**: Provide feedback during asset loading\n\n## Conclusion\n\nBuilding 3D web experiences requires a good understanding of both 3D graphics concepts and modern web development practices. With the right tools and techniques, you can create engaging and performant 3D applications that enhance user experience.",
      "author": "Amir Qafari",
      "authorImage": "/me/me.png",
      "publishedAt": "2024-01-15",
      "updatedAt": "2024-01-15",
      "readTime": "8 min read",
      "category": "Web Development",
      "tags": [
        "Three.js",
        "React",
        "WebGL",
        "3D Graphics",
        "Frontend"
      ],
      "featuredImage": "/portfolio/images/threejs-project.png",
      "seo": {
        "metaTitle": "Building Immersive 3D Web Experiences with Three.js",
        "metaDescription": "Learn how to create stunning 3D web applications using Three.js and React Three Fiber. Comprehensive guide covering setup, best practices, and advanced techniqu",
        "keywords": [
          "Three.js",
          "React Three Fiber",
          "3D web development",
          "WebGL",
          "interactive 3D",
          "web graphics"
        ]
      }
    },
    {
      "id": "2",
      "title": "Modern React Development: Hooks, Context, and Performance Optimization",
      "slug": "modern-react-development-hooks-context-performance",
      "excerpt": "Explore advanced React patterns including custom hooks, context API, and performance optimization techniques for building scalable applications.",
      "content": "React has evolved significantly with the introduction of hooks and the context API. These modern features have revolutionized how we build React applications.\n\n## Understanding React Hooks\n\nHooks allow you to use state and other React features in functional components. They provide a more direct API to the concepts you already know.\n\n### Essential Hooks\n\n- **useState**: Manage component state\n- **useEffect**: Handle side effects\n- **useContext**: Access context values\n- **useReducer**: Complex state management\n- **useMemo**: Memoize expensive calculations\n- **useCallback**: Memoize functions\n\n## Context API Deep Dive\n\nThe Context API provides a way to pass data through the component tree without having to pass props down manually at every level.\n\n### When to Use Context\n\n- Global state that many components need\n- Theme information\n- User authentication status\n- Language preferences\n\n## Performance Optimization\n\nReact applications can suffer from performance issues if not properly optimized. Here are key strategies:\n\n### 1. Memoization\n\nUse `React.memo`, `useMemo`, and `useCallback` to prevent unnecessary re-renders.\n\n### 2. Code Splitting\n\nImplement lazy loading for components and routes to reduce initial bundle size.\n\n### 3. Virtual Scrolling\n\nFor large lists, implement virtual scrolling to maintain performance.\n\n## Custom Hooks\n\nCustom hooks allow you to extract component logic into reusable functions.\n\n```javascript\nfunction useLocalStorage(key, initialValue) {\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      return initialValue;\n    }\n  });\n\n  const setValue = (value) => {\n    try {\n      setStoredValue(value);\n      window.localStorage.setItem(key, JSON.stringify(value));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n```\n\n## Conclusion\n\nModern React development focuses on functional components, hooks, and performance optimization. By mastering these concepts, you can build more maintainable and efficient applications.",
      "author": "Amir Qafari",
      "authorImage": "/me/me.png",
      "publishedAt": "2024-01-10",
      "updatedAt": "2024-01-10",
      "readTime": "12 min read",
      "category": "React",
      "tags": [
        "React Hooks",
        "Context API",
        "Performance",
        "JavaScript",
        "Frontend"
      ],
      "featuredImage": "/portfolio/images/react-project.png",
      "seo": {
        "metaTitle": "Modern React Development: Hooks, Context, and Performance",
        "metaDescription": "Master modern React patterns including hooks, context API, and performance optimization. Learn advanced techniques for building scalable React applications.",
        "keywords": [
          "React hooks",
          "Context API",
          "React performance",
          "custom hooks",
          "React optimization",
          "modern React"
        ]
      }
    },
    {
      "id": "3",
      "title": "TypeScript Best Practices for Large-Scale Applications",
      "slug": "typescript-best-practices-large-scale-applications",
      "excerpt": "Discover essential TypeScript patterns and practices for building maintainable, scalable applications. Learn advanced type techniques and project organization.",
      "content": "TypeScript has become the standard for large-scale JavaScript applications. Its type system helps catch errors early and improves code maintainability.\n\n## Type System Fundamentals\n\nUnderstanding TypeScript's type system is crucial for writing effective code.\n\n### Basic Types\n\n```typescript\n// Primitive types\nlet name: string = 'Amir';\nlet age: number = 25;\nlet isActive: boolean = true;\n\n// Array types\nlet numbers: number[] = [1, 2, 3];\nlet names: Array<string> = ['Alice', 'Bob'];\n\n// Object types\ninterface User {\n  id: number;\n  name: string;\n  email?: string; // Optional property\n}\n```\n\n## Advanced Type Techniques\n\n### Union and Intersection Types\n\n```typescript\n// Union types\ntype Status = 'loading' | 'success' | 'error';\n\n// Intersection types\ninterface Person {\n  name: string;\n}\n\ninterface Employee {\n  id: number;\n}\n\ntype EmployeePerson = Person & Employee;\n```\n\n### Generic Types\n\n```typescript\ninterface ApiResponse<T> {\n  data: T;\n  status: number;\n  message: string;\n}\n\n// Usage\nconst userResponse: ApiResponse<User> = {\n  data: { id: 1, name: 'Amir' },\n  status: 200,\n  message: 'Success'\n};\n```\n\n## Project Organization\n\n### Folder Structure\n\n```\nsrc/\n  components/\n    atoms/\n    molecules/\n    organisms/\n  hooks/\n  services/\n  types/\n  utils/\n  constants/\n```\n\n### Type Definitions\n\nKeep type definitions in dedicated files:\n\n```typescript\n// types/index.ts\nexport interface User {\n  id: number;\n  name: string;\n  email: string;\n}\n\nexport type UserRole = 'admin' | 'user' | 'moderator';\n```\n\n## Error Handling\n\n### Result Pattern\n\n```typescript\ntype Result<T, E = Error> = \n  | { success: true; data: T }\n  | { success: false; error: E };\n\nasync function fetchUser(id: number): Promise<Result<User>> {\n  try {\n    const user = await api.getUser(id);\n    return { success: true, data: user };\n  } catch (error) {\n    return { success: false, error: error as Error };\n  }\n}\n```\n\n## Testing with TypeScript\n\n### Jest Configuration\n\n```typescript\n// jest.config.ts\nimport type { Config } from '@jest/types';\n\nconst config: Config.InitialOptions = {\n  preset: 'ts-jest',\n  testEnvironment: 'node',\n  setupFilesAfterEnv: ['<rootDir>/src/setupTests.ts'],\n};\n\nexport default config;\n```\n\n## Performance Considerations\n\n### Type-only Imports\n\n```typescript\nimport type { User } from './types';\nimport { createUser } from './services';\n```\n\n### Compiler Options\n\n```json\n{\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"exactOptionalPropertyTypes\": true\n  }\n}\n```\n\n## Conclusion\n\nTypeScript provides powerful tools for building robust applications. By following these best practices, you can create maintainable, scalable codebases that are easier to debug and extend.",
      "author": "Amir Qafari",
      "authorImage": "/me/me.png",
      "publishedAt": "2024-01-05",
      "updatedAt": "2024-01-05",
      "readTime": "15 min read",
      "category": "TypeScript",
      "tags": [
        "TypeScript",
        "Type System",
        "Best Practices",
        "Large Scale",
        "JavaScript"
      ],
      "featuredImage": "/portfolio/images/typescript-project.png",
      "seo": {
        "metaTitle": "TypeScript Best Practices for Large-Scale Applications",
        "metaDescription": "Master TypeScript for large-scale applications. Learn advanced type techniques, project organization, and best practices for maintainable code.",
        "keywords": [
          "TypeScript",
          "type system",
          "best practices",
          "large scale",
          "JavaScript",
          "type safety"
        ]
      }
    },
    {
      "id": "4",
      "title": "Building Responsive 3D Portfolios with React and Three.js",
      "slug": "building-responsive-3d-portfolios-react-threejs",
      "excerpt": "Create stunning, responsive 3D portfolio websites that work across all devices. Learn techniques for optimizing 3D content for mobile and desktop.",
      "content": "3D portfolios are becoming increasingly popular as a way to showcase work in an engaging, interactive format. However, creating responsive 3D experiences presents unique challenges.\n\n## The Challenge of Responsive 3D\n\n3D content doesn't naturally adapt to different screen sizes like traditional web content. We need to consider:\n\n- Performance on mobile devices\n- Touch interactions\n- Screen orientation changes\n- Loading times\n\n## Responsive Design Strategies\n\n### 1. Adaptive Rendering\n\nAdjust render quality based on device capabilities:\n\n```javascript\nconst getDevicePixelRatio = () => {\n  return Math.min(window.devicePixelRatio, 2);\n};\n\nconst renderer = new THREE.WebGLRenderer({\n  antialias: window.innerWidth > 768\n});\n\nrenderer.setPixelRatio(getDevicePixelRatio());\n```\n\n### 2. Responsive Camera\n\nAdjust camera settings for different screen sizes:\n\n```javascript\nconst updateCamera = (width, height) => {\n  camera.aspect = width / height;\n  camera.updateProjectionMatrix();\n  renderer.setSize(width, height);\n};\n\nwindow.addEventListener('resize', () => {\n  updateCamera(window.innerWidth, window.innerHeight);\n});\n```\n\n## Mobile Optimization\n\n### Touch Controls\n\nImplement touch-friendly interactions:\n\n```javascript\nconst controls = new OrbitControls(camera, renderer.domElement);\ncontrols.enableDamping = true;\ncontrols.dampingFactor = 0.05;\ncontrols.enableZoom = true;\ncontrols.enablePan = false; // Disable pan on mobile\n```\n\n### Performance Considerations\n\n- Reduce polygon count on mobile\n- Use lower resolution textures\n- Implement level-of-detail (LOD) systems\n- Optimize shaders\n\n## Loading States\n\nProvide visual feedback during 3D content loading:\n\n```jsx\nconst [isLoading, setIsLoading] = useState(true);\nconst [loadingProgress, setLoadingProgress] = useState(0);\n\nreturn (\n  <div className=\"relative\">\n    {isLoading && (\n      <div className=\"absolute inset-0 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-white mx-auto mb-4\"></div>\n          <p className=\"text-white\">Loading 3D content... {loadingProgress}%</p>\n        </div>\n      </div>\n    )}\n    <Canvas>\n      {/* 3D content */}\n    </Canvas>\n  </div>\n);\n```\n\n## SEO Considerations\n\n### Meta Tags\n\n```html\n<meta name=\"description\" content=\"Interactive 3D portfolio showcasing web development projects\" />\n<meta property=\"og:title\" content=\"Amir Qafari - 3D Portfolio\" />\n<meta property=\"og:description\" content=\"Explore my 3D portfolio featuring React and Three.js projects\" />\n<meta property=\"og:image\" content=\"/og-image.jpg\" />\n```\n\n### Structured Data\n\n```json\n{\n  \"@context\": \"https://schema.org\",\n  \"@type\": \"Person\",\n  \"name\": \"Amir Qafari\",\n  \"jobTitle\": \"3D Web Developer\",\n  \"url\": \"https://amirqafari.vercel.app\",\n  \"sameAs\": [\n    \"https://github.com/amirqafari\",\n    \"https://linkedin.com/in/amirqafari\"\n  ]\n}\n```\n\n## Performance Monitoring\n\nTrack performance metrics:\n\n```javascript\nconst monitorPerformance = () => {\n  const observer = new PerformanceObserver((list) => {\n    for (const entry of list.getEntries()) {\n      if (entry.entryType === 'measure') {\n        console.log(`${entry.name}: ${entry.duration}ms`);\n      }\n    }\n  });\n  \n  observer.observe({ entryTypes: ['measure'] });\n};\n```\n\n## Conclusion\n\nBuilding responsive 3D portfolios requires careful consideration of performance, user experience, and SEO. By following these strategies, you can create engaging 3D experiences that work well across all devices and platforms.",
      "author": "Amir Qafari",
      "authorImage": "/me/me.png",
      "publishedAt": "2024-01-01",
      "updatedAt": "2024-01-01",
      "readTime": "10 min read",
      "category": "Portfolio",
      "tags": [
        "3D Portfolio",
        "Responsive Design",
        "Three.js",
        "React",
        "Mobile Optimization"
      ],
      "featuredImage": "/portfolio/images/portfolio-project.png",
      "seo": {
        "metaTitle": "Building Responsive 3D Portfolios with React and Three.js",
        "metaDescription": "Learn how to create responsive 3D portfolio websites that work across all devices. Mobile optimization, performance tips, and SEO strategies.",
        "keywords": [
          "3D portfolio",
          "responsive design",
          "Three.js",
          "mobile optimization",
          "portfolio website",
          "3D web development"
        ]
      }
    },
    {
      "id": "5",
      "title": "The Future of AI in Web Development: From Code Generation to Intelligent UIs",
      "slug": "future-ai-web-development-code-generation-intelligent-uis",
      "excerpt": "Explore how artificial intelligence is revolutionizing web development, from automated code generation to intelligent user interfaces and the tools shaping the future.",
      "content": "Artificial Intelligence is transforming web development at an unprecedented pace. From automated code generation to intelligent user interfaces, AI is reshaping how we build and interact with web applications.\n\n## The AI Revolution in Web Development\n\nAI has moved from being a futuristic concept to an essential tool in modern web development. Developers are now leveraging AI to:\n\n- Generate code automatically\n- Optimize performance\n- Create intelligent user experiences\n- Automate testing and debugging\n- Enhance accessibility\n\n## Code Generation with AI\n\n### GitHub Copilot and Beyond\n\nAI-powered code completion tools like GitHub Copilot have revolutionized how developers write code:\n\n```javascript\n// AI can generate complex functions from comments\n// Generate a function to validate email addresses\nfunction validateEmail(email) {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n}\n```\n\n### Benefits of AI Code Generation\n\n- **Faster Development**: Reduce time spent on boilerplate code\n- **Learning Tool**: Discover new patterns and best practices\n- **Error Reduction**: AI can catch common mistakes\n- **Documentation**: Generate inline documentation automatically\n\n## Intelligent User Interfaces\n\n### Smart Components\n\nAI enables the creation of components that adapt to user behavior:\n\n```jsx\nconst IntelligentForm = () => {\n  const [userBehavior, setUserBehavior] = useState({});\n  \n  // AI analyzes user interactions\n  const adaptFormLayout = (behavior) => {\n    if (behavior.prefersMinimal) {\n      return <MinimalFormLayout />;\n    }\n    return <DetailedFormLayout />;\n  };\n  \n  return (\n    <div>\n      {adaptFormLayout(userBehavior)}\n    </div>\n  );\n};\n```\n\n### Personalized Experiences\n\nAI can create truly personalized web experiences:\n\n- **Content Adaptation**: Show relevant content based on user preferences\n- **UI Customization**: Adapt interface based on user behavior\n- **Performance Optimization**: Adjust loading strategies per user\n\n## AI-Powered Development Tools\n\n### 1. Automated Testing\n\n```javascript\n// AI can generate comprehensive test suites\ndescribe('User Authentication', () => {\n  it('should validate email format', () => {\n    expect(validateEmail('test@example.com')).toBe(true);\n    expect(validateEmail('invalid-email')).toBe(false);\n  });\n  \n  it('should handle edge cases', () => {\n    expect(validateEmail('')).toBe(false);\n    expect(validateEmail(null)).toBe(false);\n  });\n});\n```\n\n### 2. Performance Optimization\n\nAI can analyze and optimize web performance:\n\n- **Bundle Analysis**: Identify optimization opportunities\n- **Image Optimization**: Automatically compress and format images\n- **Code Splitting**: Suggest optimal splitting strategies\n- **Caching Strategies**: Recommend caching approaches\n\n## Natural Language to Code\n\n### Conversational Development\n\nFuture development might involve natural language instructions:\n\n```javascript\n// Natural language: \"Create a responsive navigation menu with dark mode toggle\"\nconst Navigation = () => {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  \n  return (\n    <nav className={`nav ${isDarkMode ? 'dark' : 'light'}`}>\n      <div className=\"nav-container\">\n        <Logo />\n        <NavLinks />\n        <DarkModeToggle \n          isDark={isDarkMode} \n          onToggle={setIsDarkMode} \n        />\n      </div>\n    </nav>\n  );\n};\n```\n\n## AI in Design Systems\n\n### Automated Design Generation\n\nAI can generate design systems and component libraries:\n\n- **Color Palette Generation**: Create harmonious color schemes\n- **Typography Selection**: Choose optimal font combinations\n- **Layout Suggestions**: Generate responsive layouts\n- **Accessibility Compliance**: Ensure WCAG guidelines\n\n## Challenges and Considerations\n\n### 1. Code Quality\n\nWhile AI can generate code quickly, human oversight remains crucial:\n\n- Review AI-generated code for security vulnerabilities\n- Ensure code follows project standards\n- Validate business logic accuracy\n\n### 2. Learning and Adaptation\n\nDevelopers need to adapt to AI-assisted workflows:\n\n- Learn to work effectively with AI tools\n- Understand AI limitations\n- Maintain critical thinking skills\n\n### 3. Ethical Considerations\n\n- **Bias in AI**: Ensure AI tools don't perpetuate bias\n- **Privacy**: Handle user data responsibly\n- **Transparency**: Be clear about AI usage\n\n## Future Trends\n\n### 1. Voice-Driven Development\n\n```javascript\n// Future: Voice commands to generate code\n// \"Create a React component for user profile\"\nconst UserProfile = ({ user }) => {\n  return (\n    <div className=\"user-profile\">\n      <Avatar src={user.avatar} />\n      <h2>{user.name}</h2>\n      <p>{user.bio}</p>\n    </div>\n  );\n};\n```\n\n### 2. Predictive Development\n\nAI will predict developer needs and suggest solutions before problems arise.\n\n### 3. Autonomous Testing\n\nAI will create and maintain comprehensive test suites automatically.\n\n## Getting Started with AI in Web Development\n\n### 1. Choose the Right Tools\n\n- **GitHub Copilot**: For code completion\n- **Tabnine**: Alternative AI code assistant\n- **Replit Ghostwriter**: AI-powered coding environment\n- **Cursor**: AI-first code editor\n\n### 2. Learn AI-Assisted Workflows\n\n- Start with simple code generation\n- Gradually incorporate more complex AI features\n- Maintain human oversight\n- Document AI-generated code\n\n### 3. Stay Updated\n\nAI in web development is rapidly evolving:\n\n- Follow AI development news\n- Experiment with new tools\n- Share experiences with the community\n- Contribute to open-source AI projects\n\n## Conclusion\n\nAI is not replacing developers but augmenting their capabilities. The future of web development lies in the collaboration between human creativity and AI efficiency. By embracing AI tools and learning to work alongside them, developers can build more innovative, efficient, and user-friendly web applications.\n\nThe key is to view AI as a powerful ally in the development process, one that can handle routine tasks while allowing developers to focus on creative problem-solving and user experience design.",
      "author": "Amir Qafari",
      "authorImage": "/me/me.png",
      "publishedAt": "2024-01-20",
      "updatedAt": "2024-01-20",
      "readTime": "12 min read",
      "category": "AI & Technology",
      "tags": [
        "AI",
        "Web Development",
        "Code Generation",
        "Machine Learning",
        "Future Tech"
      ],
      "featuredImage": "/portfolio/images/ai-project.png",
      "seo": {
        "metaTitle": "The Future of AI in Web Development: Code Generation",
        "metaDescription": "Discover how AI is revolutionizing web development with automated code generation, intelligent UIs, and the tools shaping the future of programming.",
        "keywords": [
          "AI web development",
          "code generation",
          "intelligent UI",
          "GitHub Copilot",
          "AI tools",
          "machine learning",
          "automated development"
        ]
      }
    },
    {
      "id": "6",
      "title": "Essential Developer Tools for Maximum Productivity in 2024",
      "slug": "essential-developer-tools-maximum-productivity-2024",
      "excerpt": "Discover the most powerful developer tools and workflows that can dramatically increase your productivity. From code editors to automation tools.",
      "content": "Productivity is the cornerstone of successful development. The right tools can transform your workflow from frustrating to fluid, enabling you to focus on what matters most: building great software.\n\n## The Developer Productivity Stack\n\nModern development requires a carefully curated set of tools that work together seamlessly. Here's the essential toolkit for maximum productivity.\n\n## Code Editors and IDEs\n\n### Visual Studio Code\n\nVS Code remains the gold standard for web development:\n\n```json\n// Essential VS Code extensions\n{\n  \"recommendations\": [\n    \"ms-vscode.vscode-typescript-next\",\n    \"bradlc.vscode-tailwindcss\",\n    \"esbenp.prettier-vscode\",\n    \"ms-vscode.vscode-eslint\",\n    \"formulahendry.auto-rename-tag\",\n    \"christian-kohler.path-intellisense\",\n    \"ms-vscode.vscode-json\"\n  ]\n}\n```\n\n### Key Features for Productivity\n\n- **IntelliSense**: Smart code completion\n- **Integrated Terminal**: No context switching\n- **Git Integration**: Built-in version control\n- **Extensions**: Customizable functionality\n- **Multi-cursor Editing**: Edit multiple lines simultaneously\n\n### Advanced VS Code Workflows\n\n```javascript\n// Multi-cursor magic\n// Select multiple instances with Ctrl+D\n// Select all instances with Ctrl+Shift+L\n// Add cursor above/below with Ctrl+Alt+Up/Down\n\n// Example: Rename multiple variables\nconst userName = 'John';\nconst userEmail = 'john@example.com';\nconst userAge = 25;\n// Select 'user' and rename to 'customer'\n```\n\n## Terminal and Shell Tools\n\n### Modern Terminal Setup\n\n#### Zsh with Oh My Zsh\n\n```bash\n# Install Oh My Zsh\nexport ZSH=\"$HOME/.oh-my-zsh\"\nZSH_THEME=\"powerlevel10k/powerlevel10k\"\n\n# Essential plugins\nplugins=(\n  git\n  zsh-autosuggestions\n  zsh-syntax-highlighting\n  web-search\n  copyfile\n  copypath\n  dirhistory\n)\n```\n\n#### Useful Aliases\n\n```bash\n# Development aliases\nalias dev=\"npm run dev\"\nalias build=\"npm run build\"\nalias test=\"npm test\"\nalias lint=\"npm run lint\"\nalias format=\"npm run format\"\n\n# Git aliases\nalias gs=\"git status\"\nalias ga=\"git add\"\nalias gc=\"git commit\"\nalias gp=\"git push\"\nalias gl=\"git log --oneline\"\n\n# Directory navigation\nalias ..=\"cd ..\"\nalias ...=\"cd ../..\"\nalias ll=\"ls -la\"\nalias la=\"ls -A\"\n```\n\n### Terminal Multiplexers\n\n#### tmux for Session Management\n\n```bash\n# tmux basics\n# Start new session: tmux new -s mysession\n# Attach to session: tmux attach -t mysession\n# List sessions: tmux list-sessions\n# Kill session: tmux kill-session -t mysession\n\n# tmux configuration\nset -g default-terminal \"screen-256color\"\nset -g mouse on\nset -g base-index 1\nsetw -g pane-base-index 1\n```\n\n## Version Control Mastery\n\n### Git Workflow Optimization\n\n#### Git Hooks for Automation\n\n```bash\n#!/bin/sh\n# .git/hooks/pre-commit\n# Run linter before commit\nnpm run lint\nif [ $? -ne 0 ]; then\n  echo \"Linting failed. Commit aborted.\"\n  exit 1\nfi\n\n# Run tests\nnpm test\nif [ $? -ne 0 ]; then\n  echo \"Tests failed. Commit aborted.\"\n  exit 1\nfi\n```\n\n#### Advanced Git Commands\n\n```bash\n# Interactive rebase for clean history\ngit rebase -i HEAD~3\n\n# Stash with message\ngit stash push -m \"WIP: working on feature\"\n\n# Cherry-pick specific commits\ngit cherry-pick <commit-hash>\n\n# Create and switch to new branch\ngit checkout -b feature/new-feature\n\n# Squash commits\ngit rebase -i HEAD~n\n```\n\n## Package Managers and Build Tools\n\n### npm vs Yarn vs pnpm\n\n#### Performance Comparison\n\n```bash\n# npm (Node Package Manager)\nnpm install\nnpm run dev\n\n# Yarn (Fast, reliable, secure)\nyarn install\nyarn dev\n\n# pnpm (Fast, disk space efficient)\npnpm install\npnpm dev\n```\n\n#### Package.json Optimization\n\n```json\n{\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"tsc && vite build\",\n    \"preview\": \"vite preview\",\n    \"lint\": \"eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0\",\n    \"lint:fix\": \"eslint . --ext ts,tsx --fix\",\n    \"format\": \"prettier --write .\",\n    \"type-check\": \"tsc --noEmit\",\n    \"test\": \"vitest\",\n    \"test:ui\": \"vitest --ui\",\n    \"test:coverage\": \"vitest --coverage\"\n  }\n}\n```\n\n## Development Environment Setup\n\n### Docker for Consistent Environments\n\n```dockerfile\n# Dockerfile for development\nFROM node:18-alpine\n\nWORKDIR /app\n\n# Copy package files\nCOPY package*.json ./\n\n# Install dependencies\nRUN npm ci --only=production\n\n# Copy source code\nCOPY . .\n\n# Expose port\nEXPOSE 3000\n\n# Start application\nCMD [\"npm\", \"start\"]\n```\n\n```yaml\n# docker-compose.yml\ndocker-compose.yml\nversion: '3.8'\nservices:\n  app:\n    build: .\n    ports:\n      - \"3000:3000\"\n    volumes:\n      - .:/app\n      - /app/node_modules\n    environment:\n      - NODE_ENV=development\n\n  database:\n    image: postgres:13\n    environment:\n      POSTGRES_DB: myapp\n      POSTGRES_USER: user\n      POSTGRES_PASSWORD: password\n    ports:\n      - \"5432:5432\"\n```\n\n## Automation and Scripting\n\n### npm Scripts for Everything\n\n```json\n{\n  \"scripts\": {\n    \"setup\": \"npm install && npm run db:migrate\",\n    \"dev\": \"concurrently \\\"npm run server\\\" \\\"npm run client\\\"\",\n    \"server\": \"nodemon server.js\",\n    \"client\": \"cd client && npm start\",\n    \"build\": \"npm run build:client && npm run build:server\",\n    \"build:client\": \"cd client && npm run build\",\n    \"build:server\": \"babel server -d dist\",\n    \"deploy\": \"npm run build && npm run deploy:server\",\n    \"deploy:server\": \"pm2 start ecosystem.config.js\",\n    \"db:migrate\": \"knex migrate:latest\",\n    \"db:seed\": \"knex seed:run\",\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\",\n    \"test:coverage\": \"jest --coverage\",\n    \"lint\": \"eslint .\",\n    \"lint:fix\": \"eslint . --fix\",\n    \"format\": \"prettier --write .\",\n    \"clean\": \"rimraf dist node_modules/.cache\",\n    \"postinstall\": \"npm run db:migrate\"\n  }\n}\n```\n\n### Makefile for Complex Workflows\n\n```makefile\n# Makefile for project automation\n.PHONY: help install dev build test lint clean deploy\n\nhelp: ## Show this help message\n\t@echo 'Usage: make [target]'\n\t@echo ''\n\t@echo 'Targets:'\n\t@awk 'BEGIN {FS = \":.*?## \"} /^[a-zA-Z_-]+:.*?## / {printf \\'  %-15s %s\\n\\', $$1, $$2}' $(MAKEFILE_LIST)\n\ninstall: ## Install dependencies\n\tnpm install\n\tcd client && npm install\n\ndev: ## Start development servers\n\tnpm run dev\n\nbuild: ## Build for production\n\tnpm run build\n\ntest: ## Run tests\n\tnpm test\n\nlint: ## Run linter\n\tnpm run lint\n\nclean: ## Clean build artifacts\n\tnpm run clean\n\trm -rf dist\n\trm -rf node_modules/.cache\n\ndeploy: ## Deploy to production\n\tnpm run build\n\tnpm run deploy\n```\n\n## Browser Developer Tools\n\n### Chrome DevTools Mastery\n\n```javascript\n// Console tricks\n// Time operations\nconsole.time('API Call');\nawait fetch('/api/data');\nconsole.timeEnd('API Call');\n\n// Group related logs\nconsole.group('User Actions');\nconsole.log('User clicked button');\nconsole.log('Form submitted');\nconsole.groupEnd();\n\n// Table for arrays\nconsole.table(users);\n\n// Conditional logging\nconsole.assert(user.age > 18, 'User must be 18+');\n```\n\n### Performance Profiling\n\n```javascript\n// Performance monitoring\nconst observer = new PerformanceObserver((list) => {\n  for (const entry of list.getEntries()) {\n    console.log(`${entry.name}: ${entry.duration}ms`);\n  }\n});\n\nobserver.observe({ entryTypes: ['measure', 'navigation'] });\n\n// Custom performance marks\nperformance.mark('component-render-start');\n// Component rendering code\nperformance.mark('component-render-end');\nperformance.measure('component-render', 'component-render-start', 'component-render-end');\n```\n\n## Database Tools\n\n### Database Management\n\n#### PostgreSQL with pgAdmin\n\n```sql\n-- Useful PostgreSQL queries\n-- Find slow queries\nSELECT query, mean_time, calls \nFROM pg_stat_statements \nORDER BY mean_time DESC \nLIMIT 10;\n\n-- Database size\nSELECT pg_size_pretty(pg_database_size('myapp'));\n\n-- Table sizes\nSELECT \n  schemaname,\n  tablename,\n  pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) as size\nFROM pg_tables \nORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC;\n```\n\n#### Redis for Caching\n\n```javascript\n// Redis caching strategies\nconst redis = require('redis');\nconst client = redis.createClient();\n\n// Cache with expiration\nconst cacheUser = async (userId, userData) => {\n  await client.setex(`user:${userId}`, 3600, JSON.stringify(userData));\n};\n\n// Get cached data\nconst getCachedUser = async (userId) => {\n  const cached = await client.get(`user:${userId}`);\n  return cached ? JSON.parse(cached) : null;\n};\n```\n\n## Monitoring and Debugging\n\n### Application Monitoring\n\n```javascript\n// Error tracking with Sentry\nimport * as Sentry from '@sentry/react';\n\nSentry.init({\n  dsn: 'YOUR_DSN',\n  environment: process.env.NODE_ENV,\n  tracesSampleRate: 1.0,\n});\n\n// Custom error boundaries\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    Sentry.captureException(error, { extra: errorInfo });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n```\n\n## Productivity Tips and Tricks\n\n### Keyboard Shortcuts\n\n#### VS Code Shortcuts\n\n```\nCtrl+Shift+P - Command Palette\nCtrl+P - Quick Open\nCtrl+Shift+N - New Window\nCtrl+W - Close Tab\nCtrl+Shift+T - Reopen Closed Tab\nCtrl+` - Toggle Terminal\nCtrl+Shift+` - New Terminal\nF12 - Go to Definition\nShift+F12 - Go to References\nCtrl+Shift+O - Go to Symbol\nCtrl+T - Go to Symbol in Workspace\n```\n\n#### Browser Shortcuts\n\n```\nF12 - Open DevTools\nCtrl+Shift+I - Toggle DevTools\nCtrl+Shift+C - Element Inspector\nCtrl+Shift+J - Console\nCtrl+Shift+M - Mobile View\nF5 - Refresh\nCtrl+F5 - Hard Refresh\nCtrl+Shift+R - Hard Refresh\n```\n\n### Time Management\n\n#### Pomodoro Technique\n\n```javascript\n// Pomodoro timer implementation\nclass PomodoroTimer {\n  constructor() {\n    this.workDuration = 25 * 60; // 25 minutes\n    this.breakDuration = 5 * 60; // 5 minutes\n    this.isRunning = false;\n    this.isBreak = false;\n  }\n\n  start() {\n    this.isRunning = true;\n    this.timer = setInterval(() => {\n      this.tick();\n    }, 1000);\n  }\n\n  tick() {\n    if (this.timeLeft > 0) {\n      this.timeLeft--;\n    } else {\n      this.completeSession();\n    }\n  }\n\n  completeSession() {\n    this.isBreak = !this.isBreak;\n    this.timeLeft = this.isBreak ? this.breakDuration : this.workDuration;\n    this.notify();\n  }\n}\n```\n\n## Conclusion\n\nProductivity in development isn't just about using the right tools—it's about creating a workflow that allows you to focus on solving problems and building great software. The tools and techniques outlined here form a foundation for efficient development, but the key is to continuously refine your process and adapt to new technologies.\n\nRemember:\n\n- **Automate repetitive tasks**\n- **Learn keyboard shortcuts**\n- **Use version control effectively**\n- **Monitor and debug proactively**\n- **Keep your environment consistent**\n- **Stay organized and focused**\n\nThe goal is not to use every tool available, but to find the right combination that works for your specific needs and enhances your development experience.",
      "author": "Amir Qafari",
      "authorImage": "/me/me.png",
      "publishedAt": "2024-01-18",
      "updatedAt": "2024-01-18",
      "readTime": "15 min read",
      "category": "Developer Tools",
      "tags": [
        "Developer Tools",
        "Productivity",
        "VS Code",
        "Git",
        "Automation",
        "Workflow"
      ],
      "featuredImage": "/portfolio/images/developer-tools.png",
      "seo": {
        "metaTitle": "Essential Developer Tools for Maximum Productivity in 2024",
        "metaDescription": "Discover the most powerful developer tools and workflows for maximum productivity. VS Code, Git, automation, and modern development practices.",
        "keywords": [
          "developer tools",
          "productivity",
          "VS Code",
          "Git workflow",
          "automation",
          "development environment",
          "programming tools"
        ]
      }
    },
    {
      "id": "7",
      "title": "What is IDE? A Comprehensive Comparison of Popular IDEs",
      "slug": "what-is-ide-comprehensive-comparison-popular-ides",
      "excerpt": "Explore what an IDE is, how it differs from text editors, and compare the most popular IDEs including Visual Studio Code, IntelliJ IDEA, and more.",
      "content": "Integrated Development Environments (IDEs) are essential tools for modern software development. But what exactly is an IDE, and which one should you choose?\n\n## What is an IDE?\n\nAn **Integrated Development Environment (IDE)** is a software application that provides comprehensive facilities for software development. It typically includes:\n\n- **Source Code Editor**: Text editor with syntax highlighting and code completion\n- **Compiler/Interpreter**: Built-in tools to execute code\n- **Debugger**: Tools to test and debug programs\n- **Build Tools**: Automation for building and packaging applications\n- **Version Control Integration**: Built-in Git and other version control support\n- **Project Management**: File and project organization tools\n\n## IDE vs Text Editor\n\n### Text Editors\n\n- Lightweight and fast\n- Minimal features out of the box\n- Highly customizable with extensions\n- Examples: Notepad++, Sublime Text, Atom\n\n### IDEs\n\n- Full-featured development environments\n- Built-in tools for compiling, debugging, and building\n- Integrated project management\n- Examples: Visual Studio, IntelliJ IDEA, Eclipse\n\n## Popular IDEs Comparison\n\n### 1. Visual Studio Code (VS Code)\n\n**Best for**: Web Development, JavaScript, TypeScript, Python\n\n**Pros**:\n- Free and open-source\n- Lightweight and fast\n- Extensive extension marketplace\n- Built-in Git integration\n- Excellent debugging support\n- Great TypeScript support\n\n**Cons**:\n- Requires extensions for advanced features\n- Not as powerful as full IDEs for specific languages\n\n**Key Features**:\n```\n- IntelliSense for smart code completion\n- Built-in terminal\n- Multi-language support\n- Live Share for collaboration\n- Integrated Git commands\n- Extensions: ESLint, Prettier, GitLens\n```\n\n### 2. Visual Studio\n\n**Best for**: .NET Development, C#, C++, Windows Development\n\n**Pros**:\n- Powerful debugging tools\n- Excellent .NET support\n- Integrated SQL Server tools\n- Strong refactoring capabilities\n- Comprehensive testing tools\n\n**Cons**:\n- Large download size\n- Windows-focused (limited Mac/Linux support)\n- Resource-intensive\n\n**Key Features**:\n```\n- Advanced debugging with IntelliTrace\n- Built-in unit testing\n- Database tools\n- Profiling and diagnostics\n- Azure integration\n```\n\n### 3. IntelliJ IDEA\n\n**Best for**: Java, Kotlin, Android Development\n\n**Pros**:\n- Excellent Java support\n- Powerful code analysis\n- Great refactoring tools\n- Database tools built-in\n- Strong Spring framework support\n\n**Cons**:\n- Paid IDE (Community edition free)\n- Memory intensive\n- Steep learning curve\n\n**Key Features**:\n```\n- Smart code completion\n- Built-in terminal\n- Integrated version control\n- Database schema visualization\n- Built-in HTTP client\n- Code inspections and quick fixes\n```\n\n### 4. PyCharm\n\n**Best for**: Python Development\n\n**Pros**:\n- Excellent Python support\n- Built-in database tools\n- Remote development support\n- Scientific tools (NumPy, Pandas)\n- Django/Flask integration\n\n**Cons**:\n- Paid IDE (Community edition available)\n- Can be slow with large projects\n\n**Key Features**:\n```\n- Smart Python code completion\n- Scientific tools integration\n- Web framework support\n- Debugger with breakpoints\n- Integrated testing tools\n```\n\n### 5. WebStorm\n\n**Best for**: JavaScript, TypeScript, Web Development\n\n**Pros**:\n- Excellent JavaScript/TypeScript support\n- Built-in terminal and debugger\n- React, Vue, Angular support\n- Great debugging tools\n- Built-in HTTP client\n\n**Cons**:\n- Paid IDE\n- Memory intensive\n\n**Key Features**:\n```\n- Smart code completion\n- Built-in terminal\n- Integrated version control\n- Live code analysis\n- Built-in package manager\n```\n\n### 6. Eclipse\n\n**Best for**: Java Development, Enterprise Applications\n\n**Pros**:\n- Free and open-source\n- Very extensible\n- Strong community\n- Multiple language support\n- Rich plugin ecosystem\n\n**Cons**:\n- Can feel outdated\n- Resource intensive\n- Complex for beginners\n\n**Key Features**:\n```\n- Maven integration\n- Git support\n- Built-in compiler\n- Debugging tools\n- Plugin marketplace\n```\n\n### 7. Xcode\n\n**Best for**: iOS, macOS Development\n\n**Pros**:\n- Official Apple IDE\n- Excellent Swift/Objective-C support\n- Built-in Interface Builder\n- Simulator integration\n- SwiftUI support\n\n**Cons**:\n- Mac only\n- Large download size\n- Can be buggy\n\n**Key Features**:\n```\n- Interface Builder\n- iOS Simulator\n- Asset catalog\n- Instruments for profiling\n- Built-in Swift Playgrounds\n```\n\n### 8. Android Studio\n\n**Best for**: Android Development\n\n**Pros**:\n- Official Android IDE\n- Built on IntelliJ IDEA\n- Great emulator\n- Layout editor\n- APK analyzer\n\n**Cons**:\n- Very resource intensive\n- Long build times\n- Requires powerful machine\n\n**Key Features**:\n```\n- Layout designer\n- Android emulator\n- Gradle build system\n- Lint tools\n- APK analyzer\n```\n\n## Feature Comparison Table\n\n| Feature | VS Code | Visual Studio | IntelliJ IDEA | PyCharm | Eclipse |\n|---------|---------|--------------|---------------|---------|---------|\n| **Cost** | Free | Free | Paid | Paid | Free |\n| **Language Support** | All | .NET, C++ | Java, Kotlin | Python | Multiple |\n| **Extension Marketplace** | Yes | Yes | Yes | Yes | Yes |\n| **Debugging** | Good | Excellent | Excellent | Excellent | Good |\n| **Performance** | Fast | Moderate | Moderate | Moderate | Slow |\n| **Learning Curve** | Easy | Moderate | Steep | Moderate | Steep |\n| **Git Integration** | Excellent | Good | Excellent | Excellent | Good |\n| **Built-in Terminal** | Yes | Yes | Yes | Yes | Yes |\n| **Memory Usage** | Low | High | High | High | High |\n\n## Choosing the Right IDE\n\n### For Web Development\n\n**Recommended**: VS Code\n\n- Lightweight and fast\n- Best JavaScript/TypeScript support\n- Excellent extension ecosystem\n- Great Git integration\n- Free and open-source\n\n### For Java Development\n\n**Recommended**: IntelliJ IDEA\n\n- Best Java support\n- Excellent refactoring\n- Strong Spring framework integration\n- Great debugging tools\n\n### For Python Development\n\n**Recommended**: PyCharm\n\n- Comprehensive Python support\n- Scientific libraries integration\n- Django/Flask frameworks\n- Excellent debugging\n\n### For .NET Development\n\n**Recommended**: Visual Studio\n\n- Official Microsoft IDE\n- Best .NET support\n- Integrated database tools\n- Comprehensive testing framework\n\n### For Android Development\n\n**Recommended**: Android Studio\n\n- Official Android IDE\n- Built-in emulator\n- Layout designer\n- APK analyzer\n\n### For iOS Development\n\n**Recommended**: Xcode\n\n- Official Apple IDE\n- Interface Builder\n- Simulator integration\n- Swift compiler\n\n## IDE Setup Tips\n\n### Essential Extensions for VS Code\n\n```json\n// .vscode/extensions.json\n{\n  \"recommendations\": [\n    \"dbaeumer.vscode-eslint\",\n    \"esbenp.prettier-vscode\",\n    \"ms-python.python\",\n    \"ms-vscode.vscode-typescript-next\",\n    \"bradlc.vscode-tailwindcss\",\n    \"formulahendry.auto-rename-tag\",\n    \"christian-kohler.path-intellisense\",\n    \"eamodio.gitlens\",\n    \"usernamehw.errorlens\",\n    \"pkief.material-icon-theme\"\n  ]\n}\n```\n\n### VS Code Settings\n\n```json\n// .vscode/settings.json\n{\n  \"editor.formatOnSave\": true,\n  \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll.eslint\": true\n  },\n  \"editor.tabSize\": 2,\n  \"files.autoSave\": \"afterDelay\",\n  \"files.autoSaveDelay\": 1000,\n  \"terminal.integrated.fontSize\": 14,\n  \"workbench.colorTheme\": \"Dark+\",\n  \"editor.minimap.enabled\": true,\n  \"explorer.confirmDelete\": false\n}\n```\n\n## Productivity Tips\n\n### 1. Keyboard Shortcuts\n\nLearn essential shortcuts:\n\n```\nCtrl+Shift+P - Command Palette\nCtrl+P - Quick Open\nF12 - Go to Definition\nShift+F12 - Go to References\nCtrl+Shift+F - Find in Files\nCtrl+B - Toggle Sidebar\nCtrl+` - Toggle Terminal\n```\n\n### 2. Multi-cursor Editing\n\n```\nCtrl+D - Select next occurrence\nCtrl+Shift+L - Select all occurrences\nAlt+Click - Add cursor\nCtrl+Alt+Up/Down - Add cursor above/below\n```\n\n### 3. Code Snippets\n\nCreate custom snippets for repetitive code:\n\n```json\n// User snippets\n{\n  \"React Component\": {\n    \"prefix\": \"rfc\",\n    \"body\": [\n      \"import React from 'react';\",\n      \"\",\n      \"const $1 = () => {\",\n      \"  return (\",\n      \"    <div>$2</div>\",\n      \"  );\",\n      \"};\",\n      \"\",\n      \"export default $1;\"\n    ]\n  }\n}\n```\n\n## Conclusion\n\nChoosing the right IDE depends on your specific needs:\n\n- **Beginners**: Start with VS Code - it's free, easy to use, and powerful\n- **Java Developers**: IntelliJ IDEA is the gold standard\n- **Python Developers**: PyCharm offers the best Python experience\n- **.NET Developers**: Visual Studio is essential\n- **Mobile Developers**: Xcode for iOS, Android Studio for Android\n\nThe key is to choose an IDE that fits your workflow, learn it deeply, and customize it to your needs. Most importantly, focus on coding, not on which IDE to use. The best IDE is the one that makes you most productive!",
      "author": "Amir Qafari",
      "authorImage": "/me/me.png",
      "publishedAt": "2024-01-25",
      "updatedAt": "2024-01-25",
      "readTime": "18 min read",
      "category": "Developer Tools",
      "tags": [
        "IDE",
        "Visual Studio Code",
        "IntelliJ IDEA",
        "Development Tools",
        "Coding"
      ],
      "featuredImage": "/portfolio/images/ide-comparison.png",
      "seo": {
        "metaTitle": "IDE Comparison: VS Code, IntelliJ, PyCharm & More",
        "metaDescription": "Learn what an IDE is, compare Visual Studio Code, IntelliJ IDEA, PyCharm, and other popular IDEs. Choose the best IDE for your development needs.",
        "keywords": [
          "IDE",
          "Integrated Development Environment",
          "VS Code",
          "IntelliJ IDEA",
          "PyCharm",
          "Visual Studio",
          "development tools",
          "code editor"
        ]
      }
    },
    {
      "id": "8",
      "title": "Docker: Complete Guide to Containerization, Docker Hub, and Essential Commands",
      "slug": "docker-complete-guide-containerization-docker-hub-essential-commands",
      "excerpt": "Learn everything about Docker, containerization, Docker Hub, and master the most useful Docker commands for development and deployment.",
      "content": "Docker has revolutionized software development and deployment. This comprehensive guide covers everything you need to know about Docker, containerization, Docker Hub, and essential commands.\n\n## What is Docker?\n\n**Docker** is an open-source platform that enables developers to package applications and their dependencies into lightweight, portable containers. These containers can run consistently across different environments.\n\n### Key Concepts\n\n- **Container**: A lightweight, standalone, executable package containing everything needed to run an application\n- **Image**: A read-only template used to create containers\n- **Dockerfile**: A text file containing instructions for building an image\n- **Registry**: A repository for Docker images (Docker Hub is the most popular)\n- **Docker Engine**: The runtime that runs containers\n\n### Why Docker?\n\n**Benefits**:\n- **Consistency**: \"Works on my machine\" becomes \"works everywhere\"\n- **Isolation**: Containers isolate applications and their dependencies\n- **Portability**: Containers run on any system with Docker installed\n- **Efficiency**: Lightweight compared to virtual machines\n- **Scalability**: Easy to scale applications horizontally\n\n## Docker vs Virtual Machines\n\n### Virtual Machines\n\n```\nOperating System\n    ├── Hypervisor (VirtualBox, VMware)\n        ├── Guest OS (Full OS)\n        │   ├── Applications\n        │   └── Dependencies\n        ├── Guest OS (Full OS)\n            ├── Applications\n            └── Dependencies\n```\n\n- **Pros**: Full isolation, can run different OSes\n- **Cons**: Heavy, slow startup, requires more resources\n\n### Docker Containers\n\n```\nOperating System\n    ├── Docker Engine\n        ├── Container (Shared OS)\n        │   ├── Applications\n        │   └── Dependencies\n        ├── Container (Shared OS)\n            ├── Applications\n            └── Dependencies\n```\n\n- **Pros**: Lightweight, fast startup, resource efficient\n- **Cons**: Shared kernel, limited OS variety\n\n## Docker Hub\n\n**Docker Hub** is the world's largest container registry and community. It provides:\n\n### Features\n\n- **Public Repositories**: Share images with the community\n- **Private Repositories**: Store images securely\n- **Automated Builds**: Connect to GitHub/Bitbucket\n- **Webhooks**: Trigger actions on image updates\n- **Official Images**: Verified images from trusted sources\n- **Community Images**: Images created by developers\n\n### Using Docker Hub\n\n#### Pull Images\n\n```bash\n# Pull official images\n$ docker pull nginx\n$ docker pull node:18\n$ docker pull python:3.11\n$ docker pull mysql:8.0\n\n# Pull with specific tag\n$ docker pull ubuntu:22.04\n```\n\n#### Push Images\n\n```bash\n# Login to Docker Hub\n$ docker login\n\n# Tag your image\n$ docker tag myapp:latest username/myapp:latest\n\n# Push to Docker Hub\n$ docker push username/myapp:latest\n```\n\n#### Search Images\n\n```bash\n# Search for images\n$ docker search nginx\n\n# Search for specific tags\n$ docker search --limit 10 node\n```\n\n## Dockerfile Basics\n\n### Simple Dockerfile Example\n\n```dockerfile\n# Dockerfile for a Node.js application\nFROM node:18-alpine\n\n# Set working directory\nWORKDIR /app\n\n# Copy package files\nCOPY package*.json ./\n\n# Install dependencies\nRUN npm ci --only=production\n\n# Copy application code\nCOPY . .\n\n# Expose port\nEXPOSE 3000\n\n# Start application\nCMD [\"npm\", \"start\"]\n```\n\n### Multi-stage Build\n\n```dockerfile\n# Stage 1: Build\nFROM node:18 AS builder\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci\nCOPY . .\nRUN npm run build\n\n# Stage 2: Production\nFROM node:18-alpine\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci --only=production\nCOPY --from=builder /app/dist ./dist\nEXPOSE 3000\nCMD [\"node\", \"dist/index.js\"]\n```\n\n### Python Dockerfile\n\n```dockerfile\nFROM python:3.11-slim\n\nWORKDIR /app\n\n# Install system dependencies\nRUN apt-get update && apt-get install -y \\\n    gcc \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Copy requirements\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy application\nCOPY . .\n\n# Expose port\nEXPOSE 8000\n\n# Run application\nCMD [\"python\", \"app.py\"]\n```\n\n## Essential Docker Commands\n\n### Images Commands\n\n```bash\n# List images\n$ docker images\n$ docker image ls\n\n# Remove image\n$ docker rmi image-name\n$ docker image rm image-name\n\n# Remove all unused images\n$ docker image prune\n\n# Inspect image\n$ docker inspect image-name\n\n# Image history\n$ docker history image-name\n\n# Build image from Dockerfile\n$ docker build -t myapp:latest .\n$ docker build -t myapp:v1.0 .\n\n# Build with no cache\n$ docker build --no-cache -t myapp:latest .\n\n# Build with specific Dockerfile\n$ docker build -f Dockerfile.prod -t myapp:prod .\n```\n\n### Container Commands\n\n```bash\n# Run container\n$ docker run nginx\n$ docker run -d nginx  # Detached mode\n$ docker run -it ubuntu bash  # Interactive\n$ docker run -p 8080:80 nginx  # Port mapping\n\n# Run with environment variables\n$ docker run -e NODE_ENV=production myapp\n\n# Run with volume\n$ docker run -v /host/path:/container/path myapp\n\n# Run with custom name\n$ docker run --name my-container nginx\n\n# List running containers\n$ docker ps\n\n# List all containers\n$ docker ps -a\n\n# Stop container\n$ docker stop container-name\n$ docker stop container-id\n\n# Start container\n$ docker start container-name\n\n# Restart container\n$ docker restart container-name\n\n# Remove container\n$ docker rm container-name\n$ docker rm -f container-name  # Force remove\n\n# Remove all stopped containers\n$ docker container prune\n\n# View logs\n$ docker logs container-name\n$ docker logs -f container-name  # Follow logs\n\n# Execute command in running container\n$ docker exec -it container-name bash\n$ docker exec container-name ls\n\n# Copy file from container\n$ docker cp container-name:/path/to/file ./local/path\n\n# Copy file to container\n$ docker cp ./local/file container-name:/path/\n```\n\n### Container Management\n\n```bash\n# View container stats\n$ docker stats\n\n# View container processes\n$ docker top container-name\n\n# Inspect container\n$ docker inspect container-name\n\n# Pause container\n$ docker pause container-name\n\n# Unpause container\n$ docker unpause container-name\n\n# Rename container\n$ docker rename old-name new-name\n\n# Attach to container\n$ docker attach container-name\n```\n\n### Network Commands\n\n```bash\n# List networks\n$ docker network ls\n\n# Create network\n$ docker network create my-network\n\n# Inspect network\n$ docker network inspect network-name\n\n# Connect container to network\n$ docker network connect network-name container-name\n\n# Remove network\n$ docker network rm network-name\n\n# Remove all unused networks\n$ docker network prune\n```\n\n### Volume Commands\n\n```bash\n# List volumes\n$ docker volume ls\n\n# Create volume\n$ docker volume create my-volume\n\n# Inspect volume\n$ docker volume inspect my-volume\n\n# Remove volume\n$ docker volume rm my-volume\n\n# Remove all unused volumes\n$ docker volume prune\n```\n\n### Docker Compose Commands\n\n```bash\n# Start services\n$ docker-compose up\n$ docker-compose up -d  # Detached\n\n# Stop services\n$ docker-compose down\n\n# View logs\n$ docker-compose logs\n\n# Rebuild services\n$ docker-compose up --build\n\n# Start specific service\n$ docker-compose up service-name\n\n# Stop specific service\n$ docker-compose stop service-name\n\n# Execute command in service\n$ docker-compose exec service-name command\n```\n\n## Docker Compose\n\n### docker-compose.yml Example\n\n```yaml\nversion: '3.8'\n\nservices:\n  web:\n    build: .\n    ports:\n      - \"3000:3000\"\n    volumes:\n      - .:/app\n      - /app/node_modules\n    environment:\n      - NODE_ENV=development\n    depends_on:\n      - db\n\n  db:\n    image: postgres:13\n    environment:\n      POSTGRES_DB: myapp\n      POSTGRES_USER: user\n      POSTGRES_PASSWORD: password\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n\n  redis:\n    image: redis:7-alpine\n    ports:\n      - \"6379:6379\"\n    volumes:\n      - redis_data:/data\n\nvolumes:\n  postgres_data:\n  redis_data:\n```\n\n## Practical Examples\n\n### Running a Node.js App\n\n```bash\n# Build image\n$ docker build -t myapp:latest .\n\n# Run container\n$ docker run -d -p 3000:3000 --name myapp myapp:latest\n\n# View logs\n$ docker logs myapp\n\n# Stop and remove\n$ docker stop myapp && docker rm myapp\n```\n\n### Running a Database\n\n```bash\n# Run PostgreSQL\n$ docker run -d \\\n  --name postgres \\\n  -e POSTGRES_PASSWORD=password \\\n  -e POSTGRES_DB=mydb \\\n  -p 5432:5432 \\\n  postgres:13\n\n# Connect to PostgreSQL\n$ docker exec -it postgres psql -U postgres\n```\n\n### Running a Development Environment\n\n```bash\n# Run Node.js development container\n$ docker run -it \\\n  -v $(pwd):/app \\\n  -w /app \\\n  -p 3000:3000 \\\n  node:18 bash\n\n# Inside container\n$ npm install\n$ npm run dev\n```\n\n## Best Practices\n\n### 1. Use .dockerignore\n\n```.dockerignore\nnode_modules\nnpm-debug.log\n.git\n.gitignore\nREADME.md\n.env\n.nyc_output\ncoverage\n.DS_Store\n```\n\n### 2. Multi-stage Builds\n\nReduce image size by using multi-stage builds:\n\n```dockerfile\nFROM node:18 AS builder\nWORKDIR /app\nCOPY . .\nRUN npm install && npm run build\n\nFROM node:18-alpine\nWORKDIR /app\nCOPY --from=builder /app/dist ./dist\nCOPY package*.json ./\nRUN npm ci --only=production\nCMD [\"node\", \"dist/index.js\"]\n```\n\n### 3. Don't Run as Root\n\n```dockerfile\nFROM node:18-alpine\n\n# Create non-root user\nRUN addgroup -g 1001 -S nodejs\nRUN adduser -S nodejs -u 1001\n\nUSER nodejs\n```\n\n### 4. Optimize Layers\n\n```dockerfile\n# Bad - creates multiple layers\nRUN apt-get update\nRUN apt-get install -y gcc\nRUN npm install\n\n# Good - combines commands\nRUN apt-get update && apt-get install -y gcc && npm install && apt-get clean\n```\n\n### 5. Use Specific Tags\n\n```dockerfile\n# Bad - uses latest which can change\nFROM node:latest\n\n# Good - specific version\nFROM node:18.17.0-alpine\n```\n\n## Troubleshooting\n\n### Common Issues\n\n```bash\n# Container won't start\n$ docker logs container-name\n\n# Permission denied\n$ docker exec -u 0 container-name whoami  # Run as root\n\n# Out of disk space\n$ docker system df\n$ docker system prune\n\n# Can't connect to container\n$ docker inspect container-name  # Check network config\n\n# Port already in use\n$ docker run -p 8080:3000 myapp  # Use different host port\n```\n\n### Debug Commands\n\n```bash\n# Enter container\n$ docker exec -it container-name /bin/bash\n$ docker exec -it container-name /bin/sh  # For Alpine\n\n# Check container health\n$ docker inspect --format='{{.State.Health.Status}}' container-name\n\n# View container network\n$ docker network inspect bridge\n```\n\n## Conclusion\n\nDocker is an essential tool for modern software development. Key takeaways:\n\n1. **Docker containers** package applications and dependencies\n2. **Docker Hub** is the largest registry for images\n3. **Use multi-stage builds** to reduce image size\n4. **Follow best practices** for security and performance\n5. **Docker Compose** simplifies multi-container applications\n\nMastering Docker commands and concepts will significantly improve your development and deployment workflows. Start with the basics, practice regularly, and gradually explore more advanced features!",
      "author": "Amir Qafari",
      "authorImage": "/me/me.png",
      "publishedAt": "2024-01-22",
      "updatedAt": "2024-01-22",
      "readTime": "20 min read",
      "category": "DevOps",
      "tags": [
        "Docker",
        "Containerization",
        "Docker Hub",
        "DevOps",
        "Deployment"
      ],
      "featuredImage": "/portfolio/images/docker-project.png",
      "seo": {
        "metaTitle": "Docker Guide: Containerization & Essential Commands",
        "metaDescription": "Learn Docker, containerization, Docker Hub, and master all essential Docker commands. Complete guide with examples for development and deployment.",
        "keywords": [
          "Docker",
          "containerization",
          "Docker Hub",
          "Docker commands",
          "devops",
          "dockerfile",
          "docker compose",
          "containers"
        ]
      }
    },
    {
      "id": "9",
      "title": "Complete Guide to Most Used Linux Commands",
      "slug": "complete-guide-most-used-linux-commands",
      "excerpt": "Master the most commonly used Linux commands for file management, process control, system administration, and everyday tasks.",
      "content": "Linux commands are the foundation of working with Linux systems. This comprehensive guide covers the most frequently used commands with practical examples.\n\n## Navigation Commands\n\n### Directory Navigation\n\n```bash\n# Change directory\n$ cd /home/user/documents\n$ cd ..          # Go to parent directory\n$ cd ~           # Go to home directory\n$ cd -           # Go to previous directory\n$ cd             # Go to home directory\n\n# Print working directory\n$ pwd\n\n# List directory contents\n$ ls\n$ ls -l          # Detailed list\n$ ls -la         # All files including hidden\n$ ls -lh         # Human-readable file sizes\n$ ls -lt         # Sort by modification time\n$ ls -ltr        # Sort by time (reverse)\n\n# List with colors\n$ ls --color=auto\n```\n\n## File Management Commands\n\n### View and Read Files\n\n```bash\n# Display file content\n$ cat file.txt\n$ cat file1.txt file2.txt  # Multiple files\n\n# Display with line numbers\n$ cat -n file.txt\n\n# Display first lines (default 10)\n$ head file.txt\n$ head -n 20 file.txt\n$ head -c 100 file.txt    # First 100 bytes\n\n# Display last lines (default 10)\n$ tail file.txt\n$ tail -n 20 file.txt\n$ tail -f file.txt        # Follow (watch) file\n\n# View file page by page\n$ less file.txt\n$ more file.txt\n\n# Less navigation:\n# Space - Next page\n# b - Previous page\n# q - Quit\n# /pattern - Search\n# n - Next match\n# N - Previous match\n\n# View file types\n$ file filename\n```\n\n### Create and Modify Files\n\n```bash\n# Create empty file\n$ touch file.txt\n$ touch file1.txt file2.txt file3.txt\n\n# Copy files\n$ cp file.txt copy.txt\n$ cp file.txt /destination/\n$ cp -r directory/ /destination/  # Recursive copy\n$ cp -v file.txt copy.txt          # Verbose\n\n# Move/rename files\n$ mv file.txt newname.txt\n$ mv file.txt /destination/\n$ mv file1.txt file2.txt file3.txt /directory/\n\n# Create directories\n$ mkdir directory\n$ mkdir -p path/to/directory  # Create parent directories\n$ mkdir dir1 dir2 dir3\n\n# Remove files\n$ rm file.txt\n$ rm -i file.txt            # Interactive (confirm)\n$ rm -f file.txt            # Force (no confirmation)\n\n# Remove directories\n$ rm -r directory/\n$ rm -rf directory/        # Force recursive\n$ rmdir directory/          # Only empty directories\n\n# Rename files\n$ mv oldname.txt newname.txt\n```\n\n### Edit Files\n\n```bash\n# Edit file with nano\n$ nano file.txt\n# Ctrl+X to exit, Ctrl+O to save\n\n# Edit file with vim\n$ vim file.txt\n# i - Insert mode\n# ESC - Normal mode\n# :w - Save\n# :q - Quit\n# :wq - Save and quit\n# :q! - Quit without saving\n\n# Edit file with vi\n$ vi file.txt\n\n# Open file with default editor\n$ $EDITOR file.txt\n```\n\n## Search Commands\n\n### Find Files\n\n```bash\n# Find files by name\n$ find /path -name \"*.txt\"\n$ find . -name \"file.txt\"\n$ find . -iname \"file.txt\"  # Case insensitive\n\n# Find files by type\n$ find . -type f -name \"*.txt\"  # Files only\n$ find . -type d               # Directories only\n\n# Find files by size\n$ find . -size +100M           # Files larger than 100MB\n$ find . -size -10M             # Files smaller than 10MB\n\n# Find files by modification time\n$ find . -mtime -7             # Modified in last 7 days\n$ find . -mtime +30            # Modified more than 30 days ago\n\n# Find and execute\n$ find . -name \"*.txt\" -exec rm {} \\;\n$ find . -name \"*.log\" -delete\n\n# Locate file (uses database)\n$ locate filename\n$ sudo updatedb               # Update locate database\n```\n\n### Search in Files\n\n```bash\n# Grep - search text in files\n$ grep \"pattern\" file.txt\n$ grep -i \"pattern\" file.txt      # Case insensitive\n$ grep -r \"pattern\" directory/     # Recursive\n$ grep -l \"pattern\" directory/     # List filenames only\n$ grep -n \"pattern\" file.txt       # Show line numbers\n$ grep -v \"pattern\" file.txt      # Invert match\n$ grep -E \"pattern\" file.txt      # Extended regex\n\n# Search with context\n$ grep -C 3 \"pattern\" file.txt     # 3 lines context\n$ grep -B 2 \"pattern\" file.txt    # 2 lines before\n$ grep -A 2 \"pattern\" file.txt    # 2 lines after\n\n# Grep usage examples\n$ grep \"error\" /var/log/syslog\n$ grep -r \"TODO\" .\n$ ps aux | grep processname\n```\n\n### Advanced Search\n\n```bash\n# Find with grep\n$ find . -type f -name \"*.txt\" | xargs grep \"pattern\"\n\n# Search in compressed files\n$ zgrep \"pattern\" file.gz\n\n# Count occurrences\n$ grep -c \"pattern\" file.txt\n```\n\n## Process Management Commands\n\n### View Processes\n\n```bash\n# List processes\n$ ps\n$ ps aux                # All processes\n$ ps aux | grep nginx   # Filter\n$ ps -ef                # Full format\n$ ps -u username        # User processes\n$ ps auxf               # Process tree\n\n# Real-time process monitor\n$ top\n$ htop                  # Enhanced top (if installed)\n\n# Show process tree\n$ pstree\n```\n\n### Control Processes\n\n```bash\n# Kill process\n$ kill PID\n$ kill -9 PID           # Force kill\n$ killall processname\n$ pkill processname\n\n# Find and kill\n$ ps aux | grep processname\n$ kill $(pidof processname)\n\n# Start process in background\n$ command &\n\n# List background jobs\n$ jobs\n\n# Bring job to foreground\n$ fg %1\n\n# Run command with nohup\n$ nohup command &\n```\n\n## System Information Commands\n\n```bash\n# System information\n$ uname -a              # All system info\n$ uname -r              # Kernel version\n$ uname -m              # Machine architecture\n\n# Operating system\n$ cat /etc/os-release\n$ lsb_release -a        # Distribution info\n\n# Hardware information\n$ lscpu                 # CPU information\n$ free -h               # Memory usage\n$ df -h                 # Disk space\n$ du -h                 # Directory size\n$ du -sh *              # Directory sizes\n\n# System uptime\n$ uptime                # Uptime and load average\n\n# Who is logged in\n$ who\n$ w\n$ whoami                # Current user\n\n# Environment variables\n$ env                   # All environment variables\n$ echo $PATH\n$ export VAR=value      # Set variable\n```\n\n## Package Management Commands\n\n### Debian/Ubuntu (apt)\n\n```bash\n# Update package list\n$ sudo apt update\n\n# Upgrade packages\n$ sudo apt upgrade\n\n# Install package\n$ sudo apt install package-name\n\n# Remove package\n$ sudo apt remove package-name\n$ sudo apt purge package-name  # Remove with config\n\n# Search packages\n$ apt search keyword\n\n# Show package info\n$ apt show package-name\n\n# List installed packages\n$ apt list --installed\n\n# Clean cache\n$ sudo apt clean\n$ sudo apt autoclean\n```\n\n### Red Hat/CentOS (yum/dnf)\n\n```bash\n# Update\n$ sudo yum update\n$ sudo dnf update  # Newer versions\n\n# Install\n$ sudo yum install package-name\n$ sudo dnf install package-name\n\n# Remove\n$ sudo yum remove package-name\n\n# Search\n$ yum search keyword\n\n# List installed\n$ yum list installed\n```\n\n## Network Commands\n\n```bash\n# Network interfaces\n$ ip addr show\n$ ifconfig              # If installed\n$ ip link show\n\n# Network connectivity\n$ ping google.com\n$ ping -c 4 google.com  # 4 packets\n\n# Traceroute\n$ traceroute google.com\n$ tracepath google.com\n\n# Show network connections\n$ netstat -tulpn         # TCP/UDP listening ports\n$ ss -tulpn              # Alternative\n\n# DNS lookup\n$ nslookup domain.com\n$ dig domain.com\n$ host domain.com\n\n# Download files\n$ wget URL\n$ curl URL\n$ curl -O URL            # Save with original filename\n$ curl -o filename URL\n\n# Network configuration\n$ ip route               # Show routing table\n$ route                  # Alternative\n```\n\n## File Permissions and Ownership\n\n```bash\n# Change permissions\n$ chmod 755 file.txt     # Read/write/execute for owner, read/execute for others\n$ chmod +x script.sh     # Add execute permission\n$ chmod -r file.txt      # Remove read permission\n$ chmod u+x file.txt     # User execute\n$ chmod g+w file.txt     # Group write\n$ chmod o-r file.txt     # Others read\n\n# Change ownership\n$ chown user:group file.txt\n$ chown user file.txt\n$ chgrp group file.txt\n\n# Change ownership recursively\n$ chown -R user:group directory/\n$ chmod -R 755 directory/\n```\n\n## Compression and Archives\n\n```bash\n# Create archive\n$ tar -cf archive.tar directory/\n$ tar -czf archive.tar.gz directory/   # Compressed\n$ tar -czf archive.tar.gz file1 file2\n\n# Extract archive\n$ tar -xf archive.tar\n$ tar -xzf archive.tar.gz\n$ tar -xzf archive.tar.gz -C /destination/\n\n# List archive contents\n$ tar -tf archive.tar\n$ tar -tzf archive.tar.gz\n\n# Compress files\n$ gzip file.txt           # Creates file.txt.gz\n$ gunzip file.txt.gz      # Decompress\n\n# zip/unzip\n$ zip archive.zip file1 file2 file3\n$ zip -r archive.zip directory/\n$ unzip archive.zip\n$ unzip archive.zip -d /destination/\n\n# tar options:\n# -c: create\n# -x: extract\n# -t: list\n# -f: filename\n# -z: gzip\n# -v: verbose\n```\n\n## Text Processing Commands\n\n```bash\n# Word count\n$ wc file.txt\n$ wc -l file.txt         # Lines only\n$ wc -w file.txt         # Words only\n$ wc -c file.txt         # Characters only\n\n# Sort lines\n$ sort file.txt\n$ sort -r file.txt       # Reverse\n$ sort -n file.txt       # Numeric\n\n# Unique lines\n$ uniq file.txt\n$ uniq -c file.txt      # Count occurrences\n\n# Cut columns\n$ cut -d',' -f1,3 file.csv  # Delimiter and fields\n$ cut -c1-10 file.txt       # Characters 1-10\n\n# Replace\n$ sed 's/old/new/g' file.txt  # Replace old with new\n$ sed -i 's/old/new/g' file.txt  # In-place edit\n\n# Awk - powerful text processor\n$ awk '{print $1}' file.txt  # Print first column\n$ awk -F',' '{print $2}' file.csv  # Comma delimiter\n$ awk '/pattern/ {print}' file.txt  # Match pattern\n```\n\n## System Management Commands\n\n```bash\n# System services\n$ systemctl status service-name\n$ sudo systemctl start service-name\n$ sudo systemctl stop service-name\n$ sudo systemctl restart service-name\n$ sudo systemctl enable service-name\n$ sudo systemctl disable service-name\n\n# List services\n$ systemctl list-units --type=service\n$ systemctl list-units --type=service --state=running\n\n# System logs\n$ journalctl              # Systemd logs\n$ journalctl -u service-name  # Service logs\n$ journalctl -f           # Follow logs\n$ tail -f /var/log/syslog  # Syslog\n```\n\n## Useful Command Combinations\n\n```bash\n# Find and kill process\n$ kill $(ps aux | grep 'processname' | grep -v grep | awk '{print $2}')\n\n# Find large files\n$ find . -type f -size +100M | xargs ls -lh\n\n# Count files in directory\n$ ls -1 | wc -l\n\n# Search and replace in multiple files\n$ find . -type f -name \"*.txt\" -exec sed -i 's/old/new/g' {} \\;\n\n# Create backup\n$ tar -czf backup-$(date +%Y%m%d).tar.gz directory/\n\n# Monitor log file\n$ tail -f /var/log/apache2/access.log | grep \"ERROR\"\n\n# Disk usage by directory\n$ du -h --max-depth=1 | sort -h\n\n# Show top 10 largest files\n$ find . -type f -exec ls -lh {} \\; | sort -k5 -hr | head -10\n```\n\n## Keyboard Shortcuts\n\n```bash\n# Ctrl+C         - Cancel/Stop current command\n# Ctrl+D         - Logout/Exit\n# Ctrl+L         - Clear screen\n# Ctrl+A         - Move to beginning of line\n# Ctrl+E         - Move to end of line\n# Ctrl+U         - Clear line before cursor\n# Ctrl+K         - Clear line after cursor\n# Ctrl+W         - Delete word before cursor\n# Alt+B          - Move back one word\n# Alt+F          - Move forward one word\n# Ctrl+R         - Search command history\n# !!             - Repeat last command\n# !n             - Execute command n from history\n# !string        - Execute last command starting with string\n```\n\n## Command Aliases\n\n```bash\n# Create aliases\n$ alias ll='ls -lh'\n$ alias la='ls -la'\n$ alias ..='cd ..'\n$ alias ...='cd ../..'\n$ alias grep='grep --color=auto'\n\n# Make alias permanent (add to ~/.bashrc or ~/.zshrc)\n$ echo \"alias ll='ls -lh'\" >> ~/.bashrc\n$ source ~/.bashrc\n\n# View aliases\n$ alias\n\n# Remove alias\n$ unalias ll\n```\n\n## Important Files and Directories\n\n```bash\n# Configuration files\n$ ~/.bashrc              # Bash configuration\n$ ~/.bash_profile        # Bash profile\n$ ~/.zshrc               # Zsh configuration\n$ /etc/hosts             # Host names\n$ /etc/passwd            # User accounts\n\n# System directories\n$ /etc                   # System configuration\n$ /var                   # Variable data\n$ /opt                   # Optional software\n$ /usr                   # User programs\n$ /bin                   # Binary files\n$ /sbin                  # System binaries\n$ /tmp                   # Temporary files\n$ /home                  # User home directories\n$ /root                  # Root home directory\n```\n\n## Conclusion\n\nMastering Linux commands is essential for efficient system administration and development. Key takeaways:\n\n1. **Navigation**: Use `cd`, `ls`, `pwd` for directory management\n2. **File Operations**: Use `cp`, `mv`, `rm` for file manipulation\n3. **Search**: Use `find`, `grep` for searching files and content\n4. **Processes**: Use `ps`, `top`, `kill` for process management\n5. **Permissions**: Use `chmod`, `chown` for file permissions\n6. **Archives**: Use `tar`, `zip` for creating archives\n7. **Text Processing**: Use `awk`, `sed`, `grep` for text manipulation\n\nPractice regularly, experiment with options, and build your own command combinations to increase productivity!",
      "author": "Amir Qafari",
      "authorImage": "/me/me.png",
      "publishedAt": "2024-01-28",
      "updatedAt": "2024-01-28",
      "readTime": "22 min read",
      "category": "Linux",
      "tags": [
        "Linux",
        "Commands",
        "Bash",
        "Terminal",
        "System Administration"
      ],
      "featuredImage": "/portfolio/images/linux-commands.png",
      "seo": {
        "metaTitle": "Linux Commands: Complete Guide for Developers",
        "metaDescription": "Master essential Linux commands for file management, process control, system administration, and everyday tasks. Comprehensive guide with examples.",
        "keywords": [
          "Linux commands",
          "bash commands",
          "terminal commands",
          "file management",
          "process management",
          "linux guide",
          "system administration"
        ]
      }
    }
  ]
}